/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE APIS IN FilesystemApiGenerated.js PLEASE EDIT ../FilesystemApi.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 
// Dependencies
import axios from "axios";
import { properties } from "../../config/properties";

class FilesystemApiGenerated {

  static contextUrl = properties.endpoint + "/my/filesystems";

  // CRUD METHODS

  /**
  * FilesystemService.create
  *   @description POST a new file - File contents in the body.
  *   @param String obj Object to insert
  *
  */
  static createFilesystem(filesystem) {
    return axios.post(FilesystemApiGenerated.contextUrl, filesystem )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * FilesystemService.delete
  *   @description Delete a file. Admins only.
  *   @param String id Id Filesystem path
  *
  */
  static deleteFilesystem(id) {
    return axios.delete(FilesystemApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * FilesystemService.findByfilename
  *   @description Search for a file by filename
  *   @param String key filename of the resource filename to search
  *   @param String owner the file owners reational Id
  *
  */
  static findByfilename(id) {
    return axios.get(FilesystemApiGenerated.contextUrl + "/findByfilename/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * FilesystemService.findByr_owner
  *   @description CRUD ACTION findByr_owner
  *   @param Objectid key Id of model to search for
  *
  */
  static findByr_owner(id) {
    return axios.get(FilesystemApiGenerated.contextUrl + "/findByr_owner/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * FilesystemService.get
  *   @description Download or receive a file from the database.
  *   @param String id The path to file
  *   @returns Filesystem
  *
  */
  static getOneFilesystem(id) {
    return axios.get(FilesystemApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * FilesystemService.getr_owner
  *   @description List all the files belonging to a user.
  *   @param String id Id of the user
  *
  */
  static getR_owner(id) {
    return axios.get(FilesystemApiGenerated.contextUrl + '/' + id + 'getR_owner' )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * FilesystemService.list
  *   @description List all files
  *   @param String t Unused
  *   @returns ARRAY OF Filesystem
  *
  */
  static getFilesystemList() {
    return axios.get(FilesystemApiGenerated.contextUrl)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * FilesystemService.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  static saveFilesystem(filesystem) {
    return axios.post(FilesystemApiGenerated.contextUrl + "/" + filesystem._id, filesystem )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }



    // Custom APIs
}

export default FilesystemApiGenerated;
