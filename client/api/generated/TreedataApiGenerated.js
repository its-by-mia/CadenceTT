/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE APIS IN TreedataApiGenerated.js PLEASE EDIT ../TreedataApi.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 
// Dependencies
import axios from "axios";
import { properties } from "../../config/properties";

class TreedataApiGenerated {

  static contextUrl = properties.endpoint + "/my/advanced/treedata";

  // CRUD METHODS

  /**
  * TreedataService.create
  *   @description Create new tree structure
  *   @param String child
  *   @param String class Class
  *   @param String description
  *   @param String handle
  *   @param Number obj Object to insert
  *   @param Boolean orphan
  *   @param String parent
  *   @param String subclass
  *   @param String twin
  *
  */
  static createTreedata(treedata) {
    return axios.post(TreedataApiGenerated.contextUrl, treedata )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TreedataService.delete
  *   @description delete by name
  *   @param String id Id Treedata
  *
  */
  static deleteTreedata(id) {
    return axios.delete(TreedataApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TreedataService.findByclass
  *   @description By Class
  *   @param String key Id of the resource class to search
  *
  */
  static findByclass(id) {
    return axios.get(TreedataApiGenerated.contextUrl + "/findByclass/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TreedataService.findByref_inlaw
  *   @description Search findByref_inlaw
  *   @param String key Id of the resource ref_inlaw to search
  *
  */
  static findByref_inlaw(id) {
    return axios.get(TreedataApiGenerated.contextUrl + "/findByref_inlaw/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TreedataService.findBys_lastchild
  *   @description CRUD ACTION findBys_lastchild
  *   @param Objectid key Id of model to search for
  *
  */
  static findBys_lastchild(id) {
    return axios.get(TreedataApiGenerated.contextUrl + "/findBys_lastchild/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TreedataService.findBys_parent
  *   @description By parent
  *   @param String key Id of the resource s_parent to search
  *
  */
  static findBys_parent(id) {
    return axios.get(TreedataApiGenerated.contextUrl + "/findBys_parent/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TreedataService.get
  *   @description Get by Id
  *   @param String id Id Treedata
  *   @returns Treedata
  *
  */
  static getOneTreedata(id) {
    return axios.get(TreedataApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TreedataService.gets_parent
  *   @description gets_parent / members
  *   @param String id ID of Treedata from s_parent
  *
  */
  static getS_parent(id) {
    return axios.get(TreedataApiGenerated.contextUrl + '/' + id + 'getS_parent' )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TreedataService.list
  *   @description CRUD ACTION list
  *
  */
  static getTreedataList() {
    return axios.get(TreedataApiGenerated.contextUrl)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
  * TreedataService.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  static saveTreedata(treedata) {
    return axios.post(TreedataApiGenerated.contextUrl + "/" + treedata._id, treedata )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }



    // Custom APIs
  /**
  * TreedataService.bindMember_node
  *   @description Add a new member to a tree node
  *   @param String class - Optional
  *   @returns Boolean
  *
  */
  static bindMember_node(...params) {
    return axios.patch(TreedataApiGenerated.contextUrl + '/join-to-node/{handle}' )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

}

export default TreedataApiGenerated;
