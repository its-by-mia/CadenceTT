/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN FilesystemActionsGenerated.js PLEASE EDIT ../FilesystemActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import FilesystemApi from "../../../api/FilesystemApi";

let actionsFunction = {
  
  // Reset reducer
  reset: function() {
    return { type: types.RESET_FILESYSTEM };
  },

  //CRUD METHODS

  // Create filesystem
  createFilesystem: function(filesystem) {
    return function(dispatch) {
      return FilesystemApi
        .createFilesystem(filesystem)
        .then(filesystem => {
          dispatch(actionsFunction.createFilesystemSuccess(filesystem));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createFilesystemSuccess: function(filesystem) {
    return { type: types.CREATE_FILESYSTEM_SUCCESS, payload: filesystem };
  },


  // Delete filesystem
  deleteFilesystem: function(id) {
    return function(dispatch) {
      return FilesystemApi
        .deleteFilesystem(id)
        .then(filesystem => {
          dispatch(actionsFunction.deleteFilesystemSuccess(filesystem));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteFilesystemSuccess: function(filesystem) {
    return { type: types.DELETE_FILESYSTEM_SUCCESS, payload: filesystem };
  },


  // Find by filename
  findByfilename: function(key) {
    return function(dispatch) {
      return FilesystemApi
        .findByfilename(key)
        .then(item => {
          dispatch(actionsFunction.findByfilenameSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByfilenameSuccess: function(item) {
    return { type: types.FINDBYFILENAME_FILESYSTEM_SUCCESS, payload: item };
  },


  // Find by r_owner
  findByr_owner: function(key) {
    return function(dispatch) {
      return FilesystemApi
        .findByr_owner(key)
        .then(item => {
          dispatch(actionsFunction.findByr_ownerSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByr_ownerSuccess: function(item) {
    return { type: types.FINDBYR_OWNER_FILESYSTEM_SUCCESS, payload: item };
  },


  // Get filesystem
  loadFilesystem: function(id) {
    return function(dispatch) {
      return FilesystemApi
        .getOneFilesystem(id)
        .then(filesystem => {
          dispatch(actionsFunction.loadFilesystemSuccess(filesystem));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadFilesystemSuccess: function(filesystem) {
    return { type: types.GET_FILESYSTEM_SUCCESS, payload: filesystem };
  },

	
	// Get relation r_owner
  getr_owner: function(id) {
    return function(dispatch) {
      return FilesystemApi
        .getr_owner(id)
        .then(item => {
          dispatch(actionsFunction.getr_ownerSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  getr_ownerSuccess: function(item) {
    return { type: types.GETR_OWNER_FILESYSTEM_SUCCESS, payload: item };
  },

  // Load  list
  loadFilesystemList: function() {
    return function(dispatch) {
      return FilesystemApi
        .getFilesystemList()
        .then(list => {
          dispatch(actionsFunction.loadFilesystemListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadFilesystemListSuccess: function(list) {
    return { type: types.LIST_FILESYSTEM_SUCCESS, payload: list };
  },

	
  // Save filesystem
  saveFilesystem: function(filesystem) {
    return function(dispatch) {
      return FilesystemApi
        .saveFilesystem(filesystem)
        .then(filesystem => {
          dispatch(actionsFunction.saveFilesystemSuccess(filesystem));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveFilesystemSuccess: function(filesystem) {
    return { type: types.UPDATE_FILESYSTEM_SUCCESS, payload: filesystem };
  },


};

export default actionsFunction;
