/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN GeocodeActionsGenerated.js PLEASE EDIT ../GeocodeActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import GeocodeApi from "../../../api/GeocodeApi";

let actionsFunction = {
  
  // Reset reducer
  reset: function() {
    return { type: types.RESET_GEOCODE };
  },

  //CRUD METHODS

  // Create geocode
  createGeocode: function(geocode) {
    return function(dispatch) {
      return GeocodeApi
        .createGeocode(geocode)
        .then(geocode => {
          dispatch(actionsFunction.createGeocodeSuccess(geocode));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createGeocodeSuccess: function(geocode) {
    return { type: types.CREATE_GEOCODE_SUCCESS, payload: geocode };
  },


  // Delete geocode
  deleteGeocode: function(id) {
    return function(dispatch) {
      return GeocodeApi
        .deleteGeocode(id)
        .then(geocode => {
          dispatch(actionsFunction.deleteGeocodeSuccess(geocode));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteGeocodeSuccess: function(geocode) {
    return { type: types.DELETE_GEOCODE_SUCCESS, payload: geocode };
  },


  // Find by class
  findByclass: function(key) {
    return function(dispatch) {
      return GeocodeApi
        .findByclass(key)
        .then(item => {
          dispatch(actionsFunction.findByclassSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByclassSuccess: function(item) {
    return { type: types.FINDBYCLASS_GEOCODE_SUCCESS, payload: item };
  },


  // Find by r_owner
  findByr_owner: function(key) {
    return function(dispatch) {
      return GeocodeApi
        .findByr_owner(key)
        .then(item => {
          dispatch(actionsFunction.findByr_ownerSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByr_ownerSuccess: function(item) {
    return { type: types.FINDBYR_OWNER_GEOCODE_SUCCESS, payload: item };
  },


  // Get geocode
  loadGeocode: function(id) {
    return function(dispatch) {
      return GeocodeApi
        .getOneGeocode(id)
        .then(geocode => {
          dispatch(actionsFunction.loadGeocodeSuccess(geocode));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadGeocodeSuccess: function(geocode) {
    return { type: types.GET_GEOCODE_SUCCESS, payload: geocode };
  },

  // Load  list
  loadGeocodeList: function() {
    return function(dispatch) {
      return GeocodeApi
        .getGeocodeList()
        .then(list => {
          dispatch(actionsFunction.loadGeocodeListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadGeocodeListSuccess: function(list) {
    return { type: types.LIST_GEOCODE_SUCCESS, payload: list };
  },

	
  // Save geocode
  saveGeocode: function(geocode) {
    return function(dispatch) {
      return GeocodeApi
        .saveGeocode(geocode)
        .then(geocode => {
          dispatch(actionsFunction.saveGeocodeSuccess(geocode));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveGeocodeSuccess: function(geocode) {
    return { type: types.UPDATE_GEOCODE_SUCCESS, payload: geocode };
  },


};

export default actionsFunction;
