/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN StakeholderActionsGenerated.js PLEASE EDIT ../StakeholderActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import StakeholderApi from "../../../api/StakeholderApi";

let actionsFunction = {
  
  // Reset reducer
  reset: function() {
    return { type: types.RESET_STAKEHOLDER };
  },

  //CRUD METHODS

  // Create stakeholder
  createStakeholder: function(stakeholder) {
    return function(dispatch) {
      return StakeholderApi
        .createStakeholder(stakeholder)
        .then(stakeholder => {
          dispatch(actionsFunction.createStakeholderSuccess(stakeholder));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createStakeholderSuccess: function(stakeholder) {
    return { type: types.CREATE_STAKEHOLDER_SUCCESS, payload: stakeholder };
  },


  // Delete stakeholder
  deleteStakeholder: function(id) {
    return function(dispatch) {
      return StakeholderApi
        .deleteStakeholder(id)
        .then(stakeholder => {
          dispatch(actionsFunction.deleteStakeholderSuccess(stakeholder));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteStakeholderSuccess: function(stakeholder) {
    return { type: types.DELETE_STAKEHOLDER_SUCCESS, payload: stakeholder };
  },


  // Find by r_avatar
  findByr_avatar: function(key) {
    return function(dispatch) {
      return StakeholderApi
        .findByr_avatar(key)
        .then(item => {
          dispatch(actionsFunction.findByr_avatarSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByr_avatarSuccess: function(item) {
    return { type: types.FINDBYR_AVATAR_STAKEHOLDER_SUCCESS, payload: item };
  },


  // Find by r_collective
  findByr_collective: function(key) {
    return function(dispatch) {
      return StakeholderApi
        .findByr_collective(key)
        .then(item => {
          dispatch(actionsFunction.findByr_collectiveSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByr_collectiveSuccess: function(item) {
    return { type: types.FINDBYR_COLLECTIVE_STAKEHOLDER_SUCCESS, payload: item };
  },


  // Find by r_owner
  findByr_owner: function(key) {
    return function(dispatch) {
      return StakeholderApi
        .findByr_owner(key)
        .then(item => {
          dispatch(actionsFunction.findByr_ownerSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByr_ownerSuccess: function(item) {
    return { type: types.FINDBYR_OWNER_STAKEHOLDER_SUCCESS, payload: item };
  },


  // Get stakeholder
  loadStakeholder: function(id) {
    return function(dispatch) {
      return StakeholderApi
        .getOneStakeholder(id)
        .then(stakeholder => {
          dispatch(actionsFunction.loadStakeholderSuccess(stakeholder));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadStakeholderSuccess: function(stakeholder) {
    return { type: types.GET_STAKEHOLDER_SUCCESS, payload: stakeholder };
  },

  // Load  list
  loadStakeholderList: function() {
    return function(dispatch) {
      return StakeholderApi
        .getStakeholderList()
        .then(list => {
          dispatch(actionsFunction.loadStakeholderListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadStakeholderListSuccess: function(list) {
    return { type: types.LIST_STAKEHOLDER_SUCCESS, payload: list };
  },

	
  // Save stakeholder
  saveStakeholder: function(stakeholder) {
    return function(dispatch) {
      return StakeholderApi
        .saveStakeholder(stakeholder)
        .then(stakeholder => {
          dispatch(actionsFunction.saveStakeholderSuccess(stakeholder));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveStakeholderSuccess: function(stakeholder) {
    return { type: types.UPDATE_STAKEHOLDER_SUCCESS, payload: stakeholder };
  },


};

export default actionsFunction;
