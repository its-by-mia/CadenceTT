/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE FilesystemModelGenerated.js PLEASE EDIT ../FilesystemModel.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
// Database
import Database from "../../../classes/Database_CadenceRT_db";
import Sequelize from "sequelize";

// Logger
import Logger from "../../../classes/Logger";

const generatedModel = {

  // Start queries
    

  // CRUD METHODS


  /**
  * FilesystemModel.create
  *   @description POST a new file - File contents in the body.
  *   @param String obj Object to insert
  *
  */
  async create(item) {
    let result = await Database.getConnection().models.Filesystem.create(item);    return result;
  },
  
  /**
  * FilesystemModel.delete
  *   @description Delete a file. Admins only.
  *   @param String id Id Filesystem path
  *
  */
  async delete(id) {
    return await Database.getConnection().models.Filesystem.destroy({ where: { _id: id } });
  },
  
  /**
  * FilesystemModel.findByfilename
  *   @description Search for a file by filename
  *   @param String key filename of the resource filename to search
  *   @param String owner the file owners reational Id
  *
  */
  async findByfilename(key) {
    return await Database.getConnection().models.Filesystem.findAll({ where: { "filename": key } });
  },
  
  /**
  * FilesystemModel.findByr_owner
  *   @description CRUD ACTION findByr_owner
  *   @param Objectid key Id of model to search for
  *
  */
  async findByr_owner(key) {
    return await Database.getConnection().models.Filesystem.findAll({ where: { "r_owner": key } });
  },
  
  /**
  * FilesystemModel.get
  *   @description Download or receive a file from the database.
  *   @param String id The path to file
  *   @returns Filesystem
  *
  */
  async get(id) {
    let result = await Database.getConnection().models.Filesystem.findByPk(id);
    return result;
  },
  
  /**
  * FilesystemModel.getr_owner
  *   @description List all the files belonging to a user.
  *   @param String id Id of the user
  *
  */
  async getr_owner(id) {
    return await Database.getConnection().models.Filesystem.findAll({ where: { r_owner: id } });
  },
  
  /**
  * FilesystemModel.list
  *   @description List all files
  *   @param String t Unused
  *   @returns ARRAY OF Filesystem
  *
  */
  async list() { 
    return await Database.getConnection().models.Filesystem.findAll();
      },
  
  /**
  * FilesystemModel.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  async update(item) { 
    let result = await Database.getConnection().models.Filesystem.update(item, {
      where: { _id: item._id }
    });
    return result;
  },
  


};

export default generatedModel;
