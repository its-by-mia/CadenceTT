/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE TreedataModelGenerated.js PLEASE EDIT ../TreedataModel.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
// Database
import Database from "../../../classes/Database_CadenceRT_db";
import Sequelize from "sequelize";

// Logger
import Logger from "../../../classes/Logger";

const generatedModel = {

  // Start queries
    

  // CRUD METHODS

  
  /**
  * TreedataModel.create
  *   @description Create new tree structure
  *   @param String child
  *   @param String class Class
  *   @param String description
  *   @param String handle
  *   @param Number obj Object to insert
  *   @param Boolean orphan
  *   @param String parent
  *   @param String subclass
  *   @param String twin
  *
  */
  async create(item) {
    let result = await Database.getConnection().models.Treedata.create(item);    return result;
  },
  
  /**
  * TreedataModel.delete
  *   @description delete by name
  *   @param String id Id Treedata
  *
  */
  async delete(id) {
    return await Database.getConnection().models.Treedata.destroy({ where: { _id: id } });
  },
  
  /**
  * TreedataModel.findByclass
  *   @description By Class
  *   @param String key Id of the resource class to search
  *
  */
  async findByclass(key) {
    return await Database.getConnection().models.Treedata.findAll({ where: { "class": key } });
  },
  
  /**
  * TreedataModel.findByref_inlaw
  *   @description Search findByref_inlaw
  *   @param String key Id of the resource ref_inlaw to search
  *
  */
  async findByref_inlaw(key) {
    return await Database.getConnection().models.Treedata.findAll({ where: { "ref_inlaw": key } });
  },
  
  /**
  * TreedataModel.findBys_lastchild
  *   @description CRUD ACTION findBys_lastchild
  *   @param Objectid key Id of model to search for
  *
  */
  async findBys_lastchild(key) {
    return await Database.getConnection().models.Treedata.findAll({ where: { "s_lastchild": key } });
  },
  
  /**
  * TreedataModel.findBys_parent
  *   @description By parent
  *   @param String key Id of the resource s_parent to search
  *
  */
  async findBys_parent(key) {
    return await Database.getConnection().models.Treedata.findAll({ where: { "s_parent": key } });
  },
  
  /**
  * TreedataModel.get
  *   @description Get by Id
  *   @param String id Id Treedata
  *   @returns Treedata
  *
  */
  async get(id) {
    let result = await Database.getConnection().models.Treedata.findByPk(id);
    return result;
  },
  
  /**
  * TreedataModel.gets_parent
  *   @description gets_parent / members
  *   @param String id ID of Treedata from s_parent
  *
  */
  async gets_parent(id) {
    return await Database.getConnection().models.Treedata.findAll({ where: { s_parent: id } });
  },
  
  /**
  * TreedataModel.list
  *   @description CRUD ACTION list
  *
  */
  async list() { 
    return await Database.getConnection().models.Treedata.findAll();
      },
  
  /**
  * TreedataModel.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  async update(item) { 
    let result = await Database.getConnection().models.Treedata.update(item, {
      where: { _id: item._id }
    });
    return result;
  },
  


};

export default generatedModel;
