/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE TreedataControllerGenerated.js PLEASE EDIT ../TreedataController.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
import Properties from "../../../properties";
import TreedataModel from "../../../models/CadenceRT_db/TreedataModel";
import ErrorManager from "../../../classes/ErrorManager";
import { authorize } from "../../../security/SecurityManager";
import TreedataController from "../TreedataController";

const generatedControllers = {
  /**
   * Init routes
   */
  init: router => {
    const baseUrl = `${Properties.api}/my/advanced/treedata`;
    router.patch(baseUrl + "/join-to-node/:handle", authorize(["ADMIN"]), TreedataController.bindMember_node);
    router.post(baseUrl + "", authorize([]), TreedataController.create);
    router.delete(baseUrl + "/:id", authorize(["ADMIN"]), TreedataController.delete);
    router.get(baseUrl + "/findByclass/:key", authorize([]), TreedataController.findByclass);
    router.get(baseUrl + "/findByref_inlaw/:key", authorize([]), TreedataController.findByref_inlaw);
    router.get(baseUrl + "/findBys_lastchild/:key", authorize([]), TreedataController.findBys_lastchild);
    router.get(baseUrl + "/findBys_parent/:key", authorize([]), TreedataController.findBys_parent);
    router.get(baseUrl + "/:id", authorize([]), TreedataController.get);
    router.get(baseUrl + "/:id/gets_parent", authorize([]), TreedataController.gets_parent);
    router.get(baseUrl + "", authorize([]), TreedataController.list);
    router.post(baseUrl + "/:id", authorize([]), TreedataController.update);
  },


  // CRUD METHODS

  
  /**
  * TreedataModel.create
  *   @description Create new tree structure
  *   @param String child
  *   @param String class Class
  *   @param String description
  *   @param String handle
  *   @param Number obj Object to insert
  *   @param Boolean orphan
  *   @param String parent
  *   @param String subclass
  *   @param String twin
  *
  */
  create: async (req, res) => {
    try {
      const result = await TreedataModel.create(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * TreedataModel.delete
  *   @description delete by name
  *   @param String id Id Treedata
  *
  */
  delete: async (req, res) => {
    try {
      const result = await TreedataModel.delete(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * TreedataModel.findByclass
  *   @description By Class
  *   @param String key Id of the resource class to search
  *
  */
  findByclass: async (req, res) => {
    try {
      const result = await TreedataModel.findByclass(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * TreedataModel.findByref_inlaw
  *   @description Search findByref_inlaw
  *   @param String key Id of the resource ref_inlaw to search
  *
  */
  findByref_inlaw: async (req, res) => {
    try {
      const result = await TreedataModel.findByref_inlaw(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * TreedataModel.findBys_lastchild
  *   @description CRUD ACTION findBys_lastchild
  *   @param Objectid key Id of model to search for
  *
  */
  findBys_lastchild: async (req, res) => {
    try {
      const result = await TreedataModel.findBys_lastchild(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * TreedataModel.findBys_parent
  *   @description By parent
  *   @param String key Id of the resource s_parent to search
  *
  */
  findBys_parent: async (req, res) => {
    try {
      const result = await TreedataModel.findBys_parent(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * TreedataModel.get
  *   @description Get by Id
  *   @param String id Id Treedata
  *   @returns Treedata
  *
  */
  get: async (req, res) => {
    try {
      const result = await TreedataModel.get(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * TreedataModel.gets_parent
  *   @description gets_parent / members
  *   @param String id ID of Treedata from s_parent
  *
  */
  gets_parent: async (req, res) => {
    try {
      const result = await TreedataModel.gets_parent(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * TreedataModel.list
  *   @description CRUD ACTION list
  *
  */
  list: async (req, res) => {
    try {
      const result = await TreedataModel.list();
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  /**
  * TreedataModel.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  update: async (req, res) => {
    try {
      const result = await TreedataModel.update(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  // Custom APIs

  /**
  * TreedataModel.bindMember_node
  *   @description Add a new member to a tree node
  *   @param String class Optional
  *   @returns Boolean
  *
  */
  bindMember_node: async (req, res) => {
    try {
      res.json({});
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },

};

export default generatedControllers;
