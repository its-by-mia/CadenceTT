/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE FilesystemControllerGenerated.js PLEASE EDIT ../FilesystemController.js
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */
import Properties from "../../../properties";
import FilesystemModel from "../../../models/CadenceRT_db/FilesystemModel";
import ErrorManager from "../../../classes/ErrorManager";
import { authorize } from "../../../security/SecurityManager";
import FilesystemController from "../FilesystemController";

const generatedControllers = {
  /**
   * Init routes
   */
  init: router => {
    const baseUrl = `${Properties.api}/my/filesystems`;
    router.post(baseUrl + "", authorize([]), FilesystemController.create);
    router.delete(baseUrl + "/:id", authorize(["ADMIN"]), FilesystemController.delete);
    router.get(baseUrl + "/findByfilename/:key", authorize([]), FilesystemController.findByfilename);
    router.get(baseUrl + "/findByr_owner/:key", authorize([]), FilesystemController.findByr_owner);
    router.get(baseUrl + "/:id", authorize([]), FilesystemController.get);
    router.get(baseUrl + "/:id/getr_owner", authorize([]), FilesystemController.getr_owner);
    router.get(baseUrl + "", authorize([]), FilesystemController.list);
    router.post(baseUrl + "/:id", authorize([]), FilesystemController.update);
  },


  // CRUD METHODS


  /**
  * FilesystemModel.create
  *   @description POST a new file - File contents in the body.
  *   @param String obj Object to insert
  *
  */
  create: async (req, res) => {
    try {
      const result = await FilesystemModel.create(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * FilesystemModel.delete
  *   @description Delete a file. Admins only.
  *   @param String id Id Filesystem path
  *
  */
  delete: async (req, res) => {
    try {
      const result = await FilesystemModel.delete(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * FilesystemModel.findByfilename
  *   @description Search for a file by filename
  *   @param String key filename of the resource filename to search
  *   @param String owner the file owners reational Id
  *
  */
  findByfilename: async (req, res) => {
    try {
      const result = await FilesystemModel.findByfilename(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * FilesystemModel.findByr_owner
  *   @description CRUD ACTION findByr_owner
  *   @param Objectid key Id of model to search for
  *
  */
  findByr_owner: async (req, res) => {
    try {
      const result = await FilesystemModel.findByr_owner(req.params.key);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * FilesystemModel.get
  *   @description Download or receive a file from the database.
  *   @param String id The path to file
  *   @returns Filesystem
  *
  */
  get: async (req, res) => {
    try {
      const result = await FilesystemModel.get(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * FilesystemModel.getr_owner
  *   @description List all the files belonging to a user.
  *   @param String id Id of the user
  *
  */
  getr_owner: async (req, res) => {
    try {
      const result = await FilesystemModel.getr_owner(req.params.id);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  /**
  * FilesystemModel.list
  *   @description List all files
  *   @param String t Unused
  *   @returns ARRAY OF Filesystem
  *
  */
  list: async (req, res) => {
    try {
      const result = await FilesystemModel.list();
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  /**
  * FilesystemModel.update
  *   @description CRUD ACTION update
  *   @param ObjectId id Id
  *
  */
  update: async (req, res) => {
    try {
      const result = await FilesystemModel.update(req.body);
      res.json(result);
    } catch (err) {
      const safeErr = ErrorManager.getSafeError(err);
      res.status(safeErr.status).json(safeErr);
    }
  },
  
  
  // Custom APIs

};

export default generatedControllers;
